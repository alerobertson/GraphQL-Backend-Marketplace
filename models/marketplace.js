/*
	Author: Alexander J Robertson
	Start Date: January 2019
	marketplace.js
	
	Defines schemas and object logic for use with MongoDB
*/
const mongoose = require('mongoose')

const productSchema = new mongoose.Schema({
	//_id: { type: String, required: true }, Managed and generated by MongoDB
    title: { type: String, required: true },
    price: { type: String, required: true },
    inventory_count: { type: Number, required: true, default: 0 }
})

const cartSchema = new mongoose.Schema({
	//_id: { type: String, required: true }, Managed and generated by MongoDB
    product_ids: { type: [mongoose.ObjectId], required: true }
})

class Product {
	constructor(id, title, price, inventory_count) {
		this.id = id
		this.title = title
		this.price = price
		this.inventory_count = inventory_count
	}
}

class Cart {
	constructor(id, line_items) {
		this.id = id
		this.line_items = line_items
		this.total_price = 0
		
		line_items.forEach((item) => {
			this.total_price += (parseFloat(item.product.price) * item.quantity)
		})
	}
}

function calculateQuantity(product_ids) {
	let result = []
	product_ids.forEach((product_id) => {
		if(!result.some(p => p._id === product_id)) { result.push({ '_id': product_id, 'quantity': 1 }) }
		else {
			let index = result.map(p => p._id).indexOf(product_id)
			result[index].quantity++
		}
	})
	return result
}

function verifyQuantity(cart) {
	let all_items_valid = true
	cart.line_items.forEach((line_item) => {
		if(line_item.quantity > line_item.product.inventory_count) { all_items_valid = false }
	})
	return all_items_valid
}

module.exports = {
    productSchema: productSchema,
    cartSchema: cartSchema,
	Product: Product,
	Cart: Cart,
	calculateQuantity: calculateQuantity,
	verifyQuantity: verifyQuantity
}