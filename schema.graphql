"""
Queries will return information taken directly from the database
"""
type Query {
	"Returns a list of avaliable products from the database. All product parameters are optional."
	products(id: ID, title: String,
		in_stock: Boolean): [DatabaseProduct]
		
	"Returns shopping cart data for a specific cart."
	cart(id: ID!): Cart
}

"""
Mutations will help manipulate existing data in the database
"""
type Mutation {

	"Inserts new product info into the database. Returns result."
	newProduct(product: ProductInput!): String
	
	"Create a new cart on the database. Returns the generated ID."
	createCart: ID
	
	"Insert a product_id with quantity into a shopping cart. Returns result."
	addToCart(cart_id: ID!, product_id: ID!, quantity: Int!): String
	
	"Complete purchase of a shopping cart if it can be done. Returns result."
	purchaseCart(cart_id: ID!): String
}

"""
Represents product info taken directly from the database. It is only relevant at query time since the database can be modified.
"""
type DatabaseProduct {
	"ProductID generated by MongoDB"
	id: ID!
	
	"Name or Designation of product"
	title: String!
	
	"Price in $CAD"
	price: Float!
	
	"Remaining number of items."
	inventory_count: Int!
}

"""
Represents a products entity inside the cart. Ties quantity to product.
"""
type LineItem {
	"The product in question."
	product: DatabaseProduct!
	
	"The number of products with the same ID inside the cart"
	quantity: ID!
}

"""
Parameters for inserting a new product into the database. ProductID will be generated by MongoDB.
"""
input ProductInput {
	title: String!
	price: Float!
	inventory_count: Int!
}

"""
Represents the shopping cart object. Contains products and a total price calculated from those products.
"""
type Cart {
	"CardID generated by MongoDB"
	id: ID!
	
	"Products and their Quantities."
	line_items: [LineItem!]!
	
	"Sum cost of products inside the cart."
	total_price: Float
}